env Command
 

The env command allows you to display your current environment or run a specified command in a changed environment. 


                                                                             
┌──(avanish㉿avanish)-[~/Documents]
└─$ env | grep 'PATH'
WINDOWPATH=2
PATH=/home/avanish/.local/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/snap/bin
                                                                                
┌──(avanish㉿avanish)-[~/Documents]
└─$ echo $PATH                   
/home/avanish/.local/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/snap/bin
                                                                                
┌──(avanish㉿avanish)-[~/Documents]
└─$ whereis ls   
ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz



    env | grep 'PATH': This command prints out all environment variables set in the current shell session, 
    and then filters for only the ones containing the string "PATH". The output shows two environment variables: WINDOWPATH and PATH.

    echo $PATH: This command prints out the value of the PATH environment variable, which is a colon-separated list of
    \directories that the shell searches for executable files when a command is entered.

    whereis ls: This command searches for the binary executable file for the ls command, which lists the contents of directories.
    The output shows that there are two locations where the ls binary file is located: /usr/bin/ls and /usr/share/man/man1/ls.1.gz.
        
#include <stdio.h>


int main(int argc, char *argv[]){
	if(argc==3){
printf("Hello\n %s",argv[1]);}
	else{fprintf(stderr,"usage: %s <name>\n",argv[0]);
	return 1;}
return 0;
}
 
 When this code is run, it takes in two command-line arguments (argc and argv[]) and checks if the number of arguments is exactly 3.
 If it is, it prints out "Hello" and the first argument passed (argv[1]). If the number of arguments is not exactly 3, 
 it will print an error message to stderr indicating the proper usage of the program and return an error code of 1.
 If the program runs successfully, it will return 0.
        The fprintf() function shall place output on the named output
       stream.
